import hre, { run } from "hardhat";
import { ProofOfReservesInstance, IRelayInstance } from "../../typechain-types";
import {
  prepareAttestationRequestBase,
  retrieveDataAndProofBase,
  getFdcHub,
  getFdcRequestFee,
  getRelay,
  calculateRoundId,
  postRequestToDALayer,
  sleep,
} from "../fdcExample/Base";

const ProofOfReserves = artifacts.require("ProofOfReserves");

const PROOF_OF_RESERVES_ADDRESS = "0xE37E728bB266420a3001C8822686a69272F102fc";

const {
  VERIFIER_URL_TESTNET,
  VERIFIER_API_KEY,
  JQ_VERIFIER_URL_TESTNET,
  JQ_VERIFIER_API_KEY,
  COSTON2_DA_LAYER_URL,
} = process.env;

// yarn hardhat run scripts/proofOfReserves/verifyProofOfReserves.ts --network coston2

type AttestationRequest = {
  source: string;
  sourceIdBase: string;
  verifierUrlBase: string;
  verifierApiKey: string;
  urlTypeBase: string;
  data: any;
};

const requests: AttestationRequest[] = [
  {
    source: "jsonApi",
    sourceIdBase: "WEB2",
    verifierUrlBase: JQ_VERIFIER_URL_TESTNET!,
    verifierApiKey: JQ_VERIFIER_API_KEY!,
    urlTypeBase: "",
    data: {
      apiUrl:
        "https://api.htdigitalassets.com/alm-stablecoin-db/metrics/current_reserves_amount",
      postprocessJq: `{reserves: .value | gsub(\",\";\"\") | sub(\"\\\\.\\\\d*\";\"\")}`,
      abiSignature: `{\"components\": [{\"internalType\": \"uint256\",\"name\": \"reserves\",\"type\": \"uint256\"}],\"internalType\": \"struct DataTransportObject\",\"name\": \"dto\",\"type\": \"tuple\"}`,
    },
  },
  {
    source: "coston",
    sourceIdBase: "testSGB",
    verifierUrlBase: VERIFIER_URL_TESTNET!,
    verifierApiKey: VERIFIER_API_KEY!,
    urlTypeBase: "sgb",
    data: {
      transactionHash:
        "0x517a113851ed6c260734516e8c5ddeede46b467510c1c1d3456696ece3dd83d8",
    },
  },
  {
    source: "coston2",
    sourceIdBase: "testFLR",
    verifierUrlBase: VERIFIER_URL_TESTNET!,
    verifierApiKey: VERIFIER_API_KEY!,
    urlTypeBase: "flr",
    data: {
      transactionHash:
        "0x921f8b5f1e18d2f410e669f45109d804eeebe4481b69b1c9f1c73bcef88580dd",
    },
  },
];

async function prepareJsonApiAttestationRequest(
  transaction: AttestationRequest
) {
  const attestationTypeBase = "IJsonApi";

  const requestBody = {
    url: transaction.data.apiUrl,
    postprocessJq: transaction.data.postprocessJq,
    abi_signature: transaction.data.abiSignature,
  };

  const url = `${transaction.verifierUrlBase}JsonApi/prepareRequest`;
  const apiKey = transaction.verifierApiKey;

  return await prepareAttestationRequestBase(
    url,
    apiKey,
    attestationTypeBase,
    transaction.sourceIdBase,
    requestBody
  );
}

async function prepareTransactionAttestationRequest(
  transaction: AttestationRequest
) {
  const attestationTypeBase = "EVMTransaction";

  const requiredConfirmations = "1";
  const provideInput = true;
  const listEvents = true;
  const logIndices: string[] = [];

  const requestBody = {
    transactionHash: transaction.data.transactionHash,
    requiredConfirmations: requiredConfirmations,
    provideInput: provideInput,
    listEvents: listEvents,
    logIndices: logIndices,
  };

  const url = `${transaction.verifierUrlBase}verifier/${transaction.urlTypeBase}/EVMTransaction/prepareRequest`;
  const apiKey = transaction.verifierApiKey;

  return await prepareAttestationRequestBase(
    url,
    apiKey,
    attestationTypeBase,
    transaction.sourceIdBase,
    requestBody
  );
}

async function prepareAttestationRequests(transactions: AttestationRequest[]) {
  console.log("\nPreparing data...\n");
  var data: Map<string, string> = new Map();

  for (const transaction of transactions) {
    console.log(`(${transaction.source})\n`);

    if (transaction.source === "jsonApi") {
      const responseData = await prepareJsonApiAttestationRequest(transaction);
      console.log("Data:", responseData, "\n");
      data.set(transaction.source, responseData.abiEncodedRequest);
    } else {
      const responseData = await prepareTransactionAttestationRequest(
        transaction
      );
      console.log("Data:", responseData, "\n");
      data.set(transaction.source, responseData.abiEncodedRequest);
    }
  }

  return data;
}

async function submitAttestationRequests(data: Map<string, string>) {
  console.log("\nSubmitting attestation requests...\n");

  const fdcHub = await getFdcHub();
  var roundIds: Map<string, number> = new Map();

  for (const [source, abiEncodedRequest] of data.entries()) {
    console.log(`(${source})\n`);

    const requestFee = await getFdcRequestFee(abiEncodedRequest);
    const transaction = await fdcHub.requestAttestation(abiEncodedRequest, {
      value: requestFee,
    });
    console.log("Submitted request:", transaction.tx, "\n");

    const roundId = await calculateRoundId(transaction);
    console.log(
      `Check round progress at: https://${hre.network.name}-systems-explorer.flare.rocks/voting-epoch/${roundId}?tab=fdc\n`
    );
    roundIds.set(source, roundId);
  }

  return roundIds;
}

async function retrieveDataAndProofs(
  data: Map<string, string>,
  roundIds: Map<string, number>
) {
  console.log("\nRetrieving data and proofs...\n");

  var proofs: Map<string, any> = new Map();

  const url = `${COSTON2_DA_LAYER_URL}api/v1/fdc/proof-by-request-round-raw`;
  console.log("Url:", url, "\n");
  for (const [source, roundId] of roundIds.entries()) {
    console.log(`(${source})\n`);

    console.log("Waiting for the round to finalize...");
    // We check every 10 seconds if the round is finalized
    const relay: IRelayInstance = await getRelay();
    while (!(await relay.isFinalized(200, roundId))) {
      await sleep(10000);
    }
    console.log("Round finalized!\n");

    const request = {
      votingRoundId: roundId,
      requestBytes: data.get(source),
    };
    console.log("Prepared request:\n", request, "\n");

    var proof = await postRequestToDALayer(url, request, true);
    console.log("Waiting for the DA Layer to generate the proof...");
    while (proof.response_hex == undefined) {
      await sleep(10000);
      proof = await postRequestToDALayer(url, request, false);
    }
    console.log("Proof generated!\n");

    console.log("Proof:", proof, "\n");
    proofs.set(source, proof);
  }
  return proofs;
}

async function prepareDataAndProofs(data: Map<string, any>) {
  const IJsonApiVerification = await artifacts.require("IJsonApiVerification");
  const IEVMTransactionVerification = await artifacts.require(
    "IEVMTransactionVerification"
  );

  const jsonProof = {
    merkleProof: data.get("jsonApi").proof,
    data: web3.eth.abi.decodeParameter(
      IJsonApiVerification._json.abi[0].inputs[0].components[1],
      data.get("jsonApi").response_hex
    ),
  };
  var transactionProofs: any[] = [];
  for (const [source, proof] of data.entries()) {
    if (source !== "jsonApi") {
      const decodedProof = web3.eth.abi.decodeParameter(
        IEVMTransactionVerification._json.abi[0].inputs[0].components[1],
        proof.response_hex
      );
      transactionProofs.push({
        merkleProof: proof.proof,
        data: decodedProof,
      });
    }
  }

  return [jsonProof, transactionProofs];
}

async function submitDataAndProofsToProofOfReserves(data: Map<string, any>) {
  const proofOfReserves: ProofOfReservesInstance = await ProofOfReserves.at(
    PROOF_OF_RESERVES_ADDRESS
  );

  const [jsonProof, transactionProofs] = await prepareDataAndProofs(data);

  var supplies: string[] = [];

  for (const proof of transactionProofs) {
    for (const event of proof.data.responseBody.events) {
      try {
        const decodedEvent = web3.eth.abi.decodeLog(
          [
            {
              type: "address",
              name: "tokenAddress",
            },
            { type: "uint256", name: "totalSupply" },
          ],
          event.data,
          event.topics
        );
        console.log("Decoded event:", decodedEvent, "\n");
        if (
          decodedEvent.tokenAddress ==
            "0x971C2CbD573e9aCbad555Fdd2252ab21eb73a962" ||
          decodedEvent.tokenAddress ==
            "0x1C57e92ca1d10403B1F425699fe629B439F68A12"
        ) {
          supplies.push(decodedEvent.totalSupply);
        } else {
          supplies.push("0");
        }
      } catch (error) {
        supplies.push("0");
      }
    }
  }

  console.log("Supplies:", supplies, "\n");

  const transaction = await proofOfReserves.verifyReserves(
    jsonProof,
    transactionProofs,
    supplies
  );
  // console.log(transaction, "\n");
  const sufficientReserves: boolean = true;
  return sufficientReserves;
}

async function main() {
  // const data = await prepareAttestationRequests(requests);
  // const roundIds = await submitAttestationRequests(data);
  // const proofs = await retrieveDataAndProofs(data, roundIds);

  const proofs = new Map([
    [
      "jsonApi",
      {
        response_hex:
          "0x0000000000000000000000000000000000000000000000000000000000000020494a736f6e417069000000000000000000000000000000000000000000000000574542320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dff72000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000005168747470733a2f2f6170692e68746469676974616c6173736574732e636f6d2f616c6d2d737461626c65636f696e2d64622f6d6574726963732f63757272656e745f72657365727665735f616d6f756e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000357b72657365727665733a202e76616c7565207c206773756228222c223b222229207c2073756228225c5c2e5c5c642a223b2222297d0000000000000000000000000000000000000000000000000000000000000000000000000000000000009d7b22636f6d706f6e656e7473223a205b7b22696e7465726e616c54797065223a202275696e74323536222c226e616d65223a20227265736572766573222c2274797065223a202275696e74323536227d5d2c22696e7465726e616c54797065223a202273747275637420446174615472616e73706f72744f626a656374222c226e616d65223a202264746f222c2274797065223a20227475706c65227d000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000001a29f01",
        attestation_type:
          "0x494a736f6e417069000000000000000000000000000000000000000000000000",
        proof: [
          "0x8c3a8db41ef2a8c3b1e13c8e878dc00bb59ad8e5da24358738294c76be94cd20",
          "0xff560f23dab4189100e7f27a5d42bea75cd4c9790d456b9a10d63490579bf750",
          "0x2e0d53aa245fe7b6c2dadbe9cd197a5b063a512d8fc340a820996d9fa6665561",
          "0x250eb617fb3ee94d8643a8d3cb4bdbf425ddbd5c2bccf4c172ddb7ff884d0c0c",
          "0x8c46672a2f92ed27b54c9fefba6930350fabfb76f309d3651ac4379c2ac52895",
        ],
      },
    ],
    [
      "coston",
      {
        response_hex:
          "0x000000000000000000000000000000000000000000000000000000000000002045564d5472616e73616374696f6e000000000000000000000000000000000000746573745347420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dff720000000000000000000000000000000000000000000000000000000067beb8c600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000180517a113851ed6c260734516e8c5ddeede46b467510c1c1d3456696ece3dd83d800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f218a40000000000000000000000000000000000000000000000000000000067beb8c6000000000000000000000000f5488132432118596fa13800b68df4c0ff25131d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a10896efaa5719787b630997562d6637b30debc500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000024a8084fa5000000000000000000000000971c2cbd573e9acbad555fdd2252ab21eb73a962000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a10896efaa5719787b630997562d6637b30debc500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ada6cc338db1d171628fb0e89fb519e7c2b86c0932b9c0c9ca75322bb32159a20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000971c2cbd573e9acbad555fdd2252ab21eb73a9620000000000000000000000000000000000000000000000241a9b4f617a2800000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000100000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000012d20f1b378cd8ee8da4729262645ec62fd52307000000000000000000000000000000000000000000000000000000000000421a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000100000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000085680dd93755fe5d0789773fd0896cee51f9e3580000000000000000000000000000000000000000000000000000000000004bfa0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000100000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b40000000000000000000000000000000000000000000000000000000000000040000000000000000000000000b8336a96b4b8af89f60ea080002214191bc8293a00000000000000000000000000000000000000000000000000000000000103ba",
        attestation_type:
          "0x45564d5472616e73616374696f6e000000000000000000000000000000000000",
        proof: [
          "0xe6f3a979c283698942900615052b8c9c86841fa07cefa85bd530225405e6f5bb",
          "0xba21f8b51db8de4b6075db38d204fe58b7572a662f9b04e74e894fc6a0596f30",
          "0x0d0cc58a63efcf0e079c378086eeb8cafa647f547697702c8c3805fa69d39ec9",
          "0x77704af02be9c6205d00e6e2bd570d075ee15c30b8952da57bbeda7ef3a3c922",
          "0xc33f134942c6744ca7b0f93c47391788f6992d2aee1a006e9212d2c8146ef4e3",
        ],
      },
    ],
    [
      "coston2",
      {
        response_hex:
          "0x000000000000000000000000000000000000000000000000000000000000002045564d5472616e73616374696f6e00000000000000000000000000000000000074657374464c520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dff720000000000000000000000000000000000000000000000000000000067beb8ca00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000180921f8b5f1e18d2f410e669f45109d804eeebe4481b69b1c9f1c73bcef88580dd00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eba6b00000000000000000000000000000000000000000000000000000000067beb8ca000000000000000000000000f5488132432118596fa13800b68df4c0ff25131d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091d1fa626b9555c045e1c9a00746aa621855ee0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000024a8084fa50000000000000000000000001c57e92ca1d10403b1f425699fe629b439f68a120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000800000000000000000000000091d1fa626b9555c045e1c9a00746aa621855ee0100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ada6cc338db1d171628fb0e89fb519e7c2b86c0932b9c0c9ca75322bb32159a200000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c57e92ca1d10403b1f425699fe629b439f68a120000000000000000000000000000000000000000000000241a9b4f617a280000",
        attestation_type:
          "0x45564d5472616e73616374696f6e000000000000000000000000000000000000",
        proof: [
          "0x1503070f5f7cbbc97a517cc2ee39b3047cf176a8b8ca22239c3f59cae34963e3",
          "0xc2f31563ddb198a80834d8120461569e28483675aa87fb3b086b611a0f8119c7",
          "0x9bdf072a6418a9452a5f00837c842308dd16b48f2e89bb066fa0ee6513078ca8",
          "0xc33f134942c6744ca7b0f93c47391788f6992d2aee1a006e9212d2c8146ef4e3",
        ],
      },
    ],
  ]);
  const sufficientReserves = await submitDataAndProofsToProofOfReserves(proofs);
  console.log("Sufficient reserves:", sufficientReserves);
}

main().then((data) => {
  process.exit(0);
});
